// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: student.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	// Unary RPC: Send a single request and receive a single response.
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*StudentResponse, error)
	// Server Streaming RPC: Send a single request and receive multiple responses.
	GetAllStudents(ctx context.Context, in *GetAllStudentRequest, opts ...grpc.CallOption) (StudentService_GetAllStudentsClient, error)
	// Client Streaming RPC: Send multiple requests and receive a single response.
	AddStudents(ctx context.Context, opts ...grpc.CallOption) (StudentService_AddStudentsClient, error)
	// Bidirectional Streaming RPC: Send and receive multiple requests and responses.
	Chat(ctx context.Context, opts ...grpc.CallOption) (StudentService_ChatClient, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, "/service.StudentService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetAllStudents(ctx context.Context, in *GetAllStudentRequest, opts ...grpc.CallOption) (StudentService_GetAllStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[0], "/service.StudentService/GetAllStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceGetAllStudentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentService_GetAllStudentsClient interface {
	Recv() (*StudentResponse, error)
	grpc.ClientStream
}

type studentServiceGetAllStudentsClient struct {
	grpc.ClientStream
}

func (x *studentServiceGetAllStudentsClient) Recv() (*StudentResponse, error) {
	m := new(StudentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) AddStudents(ctx context.Context, opts ...grpc.CallOption) (StudentService_AddStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[1], "/service.StudentService/AddStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceAddStudentsClient{stream}
	return x, nil
}

type StudentService_AddStudentsClient interface {
	Send(*AddStudentRequest) error
	CloseAndRecv() (*StudentsResponse, error)
	grpc.ClientStream
}

type studentServiceAddStudentsClient struct {
	grpc.ClientStream
}

func (x *studentServiceAddStudentsClient) Send(m *AddStudentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceAddStudentsClient) CloseAndRecv() (*StudentsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StudentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (StudentService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[2], "/service.StudentService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceChatClient{stream}
	return x, nil
}

type StudentService_ChatClient interface {
	Send(*GetStudentRequest) error
	Recv() (*StudentResponse, error)
	grpc.ClientStream
}

type studentServiceChatClient struct {
	grpc.ClientStream
}

func (x *studentServiceChatClient) Send(m *GetStudentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceChatClient) Recv() (*StudentResponse, error) {
	m := new(StudentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	// Unary RPC: Send a single request and receive a single response.
	GetStudent(context.Context, *GetStudentRequest) (*StudentResponse, error)
	// Server Streaming RPC: Send a single request and receive multiple responses.
	GetAllStudents(*GetAllStudentRequest, StudentService_GetAllStudentsServer) error
	// Client Streaming RPC: Send multiple requests and receive a single response.
	AddStudents(StudentService_AddStudentsServer) error
	// Bidirectional Streaming RPC: Send and receive multiple requests and responses.
	Chat(StudentService_ChatServer) error
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) GetStudent(context.Context, *GetStudentRequest) (*StudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudentServiceServer) GetAllStudents(*GetAllStudentRequest, StudentService_GetAllStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedStudentServiceServer) AddStudents(StudentService_AddStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStudents not implemented")
}
func (UnimplementedStudentServiceServer) Chat(StudentService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.StudentService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetAllStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllStudentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServiceServer).GetAllStudents(m, &studentServiceGetAllStudentsServer{stream})
}

type StudentService_GetAllStudentsServer interface {
	Send(*StudentResponse) error
	grpc.ServerStream
}

type studentServiceGetAllStudentsServer struct {
	grpc.ServerStream
}

func (x *studentServiceGetAllStudentsServer) Send(m *StudentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentService_AddStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).AddStudents(&studentServiceAddStudentsServer{stream})
}

type StudentService_AddStudentsServer interface {
	SendAndClose(*StudentsResponse) error
	Recv() (*AddStudentRequest, error)
	grpc.ServerStream
}

type studentServiceAddStudentsServer struct {
	grpc.ServerStream
}

func (x *studentServiceAddStudentsServer) SendAndClose(m *StudentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceAddStudentsServer) Recv() (*AddStudentRequest, error) {
	m := new(AddStudentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).Chat(&studentServiceChatServer{stream})
}

type StudentService_ChatServer interface {
	Send(*StudentResponse) error
	Recv() (*GetStudentRequest, error)
	grpc.ServerStream
}

type studentServiceChatServer struct {
	grpc.ServerStream
}

func (x *studentServiceChatServer) Send(m *StudentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceChatServer) Recv() (*GetStudentRequest, error) {
	m := new(GetStudentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _StudentService_GetStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStudents",
			Handler:       _StudentService_GetAllStudents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddStudents",
			Handler:       _StudentService_AddStudents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _StudentService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "student.proto",
}
